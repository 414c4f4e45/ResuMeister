Q: What is an array?
A: An array is a data structure that stores a collection of elements, each identified by an index or key. Arrays allow for efficient access to elements using their index, and they are typically used when the number of elements is known and remains constant. Elements in an array are stored in contiguous memory locations, which allows for quick retrieval and manipulation of data.

Q: What is a linked list?
A: A linked list is a data structure consisting of a sequence of elements, called nodes, where each node contains a data value and a reference (or link) to the next node in the sequence. Unlike arrays, linked lists do not require contiguous memory allocation and are more flexible in terms of dynamic memory usage. They are used to implement various abstract data types and can easily support insertion and deletion operations.

Q: What is a stack?
A: A stack is a linear data structure that follows the Last In, First Out (LIFO) principle, where the last element added to the stack is the first one to be removed. Operations on a stack include push (adding an element) and pop (removing the top element). Stacks are commonly used in scenarios like expression evaluation, backtracking algorithms, and managing function calls in programming languages.

Q: What is a queue?
A: A queue is a linear data structure that follows the First In, First Out (FIFO) principle, where the first element added to the queue is the first one to be removed. Queues support operations like enqueue (adding an element) and dequeue (removing the front element). They are used in scenarios like task scheduling, breadth-first search algorithms, and buffering in data streams.

Q: What is a stack overflow?
A: A stack overflow occurs when a program attempts to use more stack space than is available. This usually happens due to excessive function calls, deep recursion, or memory leaks, and can result in program crashes or undefined behavior. Stack overflow is a common issue in programming, especially when dealing with recursive algorithms.

Q: What is a queue underflow?
A: A queue underflow occurs when an attempt is made to remove an element from an empty queue. Since there are no elements to remove, the operation fails. This situation typically arises in queue implementations if the queue is not properly checked for emptiness before performing dequeue operations.

Q: What is a binary tree?
A: A binary tree is a hierarchical data structure where each node has at most two children, referred to as the left child and the right child. The topmost node is called the root, and the nodes with no children are called leaves. Binary trees are used in various applications, including expression parsing, binary search trees, and hierarchical data representation.

Q: What is a binary search tree (BST)?
A: A binary search tree (BST) is a type of binary tree where each node follows the property that its left child contains only nodes with values less than the node’s value, and its right child contains only nodes with values greater than the node’s value. This property allows for efficient searching, insertion, and deletion operations.

Q: What is a heap?
A: A heap is a specialized binary tree-based data structure that satisfies the heap property. In a max-heap, each parent node is greater than or equal to its child nodes, while in a min-heap, each parent node is less than or equal to its child nodes. Heaps are used in priority queues and heap sort algorithms due to their efficient retrieval of the maximum or minimum element.

Q: What is a hash table?
A: A hash table is a data structure that uses a hash function to map keys to values in a way that allows for fast data retrieval. The hash function generates an index where the corresponding value is stored. Hash tables provide average-case constant time complexity for operations like insertion, deletion, and search, though they can suffer from collisions, where different keys map to the same index.

Q: What is a collision in a hash table?
A: A collision in a hash table occurs when two or more keys hash to the same index in the table. Collisions are managed using techniques such as chaining (storing colliding elements in a linked list at the same index) or open addressing (finding another open slot using probing). Proper collision handling ensures efficient performance of hash table operations.

Q: What is a doubly linked list?
A: A doubly linked list is a type of linked list where each node contains a data value and two references: one to the next node and one to the previous node. This allows for bidirectional traversal of the list, enabling efficient insertion and deletion operations from both ends of the list and in the middle.

Q: What is a circular linked list?
A: A circular linked list is a variation of a linked list where the last node points back to the first node, creating a circular structure. This can be either singly linked or doubly linked. Circular linked lists are useful for applications that require a continuous loop through the elements, such as round-robin scheduling.

Q: What is a graph?
A: A graph is a data structure that consists of a set of vertices (nodes) connected by edges. Graphs can be directed or undirected, depending on whether the edges have a direction or not. They are used to represent relationships and connections in various applications, including social networks, computer networks, and routing algorithms.

Q: What is a depth-first search (DFS) in a graph?
A: Depth-first search (DFS) is an algorithm used to traverse or search through a graph by starting at a root node and exploring as far as possible along each branch before backtracking. DFS uses a stack data structure (either explicitly or through recursion) to keep track of the nodes to be explored next.

Q: What is a breadth-first search (BFS) in a graph?
A: Breadth-first search (BFS) is an algorithm used to traverse or search through a graph by exploring all the neighbor nodes at the present depth before moving on to nodes at the next depth level. BFS uses a queue data structure to keep track of the nodes to be explored next and is useful for finding the shortest path in unweighted graphs.

Q: What is a subtree in a binary tree?
A: A subtree in a binary tree is any node and all its descendants within the tree. Each node in a binary tree is the root of a subtree that includes itself and all of its child nodes. Subtrees are useful in various operations such as searching, insertion, and deletion.

Q: What is an inorder traversal in a binary tree?
A: An inorder traversal of a binary tree is a depth-first traversal method where the nodes are recursively visited in the following order: left subtree, root node, and right subtree. This traversal method results in the nodes being accessed in ascending order if the binary tree is a binary search tree.

Q: What is a preorder traversal in a binary tree?
A: A preorder traversal of a binary tree is a depth-first traversal method where the nodes are recursively visited in the following order: root node, left subtree, and right subtree. This traversal method processes the root node before its children, which is useful for creating a copy of the tree or evaluating prefix expressions.

Q: What is a postorder traversal in a binary tree?
A: A postorder traversal of a binary tree is a depth-first traversal method where the nodes are recursively visited in the following order: left subtree, right subtree, and root node. This traversal method processes the children before the root, which is useful for deleting nodes or evaluating postfix expressions.

Q: What is a linked list reversal?
A: Linked list reversal is the process of changing the direction of the links between nodes in a linked list so that the last node becomes the first node and vice versa. This operation can be performed iteratively or recursively and is useful for reversing the order of elements in the list.

Q: What is a doubly linked list reversal?
A: Reversing a doubly linked list involves changing the direction of the links in both the forward and backward references. Each node's previous and next pointers are swapped, so the list's head becomes the tail, and the tail becomes the head. This operation allows traversal of the list in the opposite direction.

Q: What is a binary search tree (BST) traversal?
A: Binary search tree (BST) traversal refers to the methods used to visit all the nodes in a BST. Common traversal methods include inorder (left subtree, root, right subtree), preorder (root, left subtree, right subtree), and postorder (left subtree, right subtree, root). Each traversal method provides different ways to access and process the nodes in the BST.

Q: What is a self-balancing binary search tree?
A: A self-balancing binary search tree is a type of binary search tree that automatically maintains its balance during insertions and deletions to ensure that the height of the tree remains logarithmic with respect to the number of nodes. Examples include AVL trees and Red-Black trees. Self-balancing trees provide efficient search, insertion, and deletion operations.

Q: What is an AVL tree?
A: An AVL tree is a type of self-balancing binary search tree where the difference in height between the left and right subtrees of any node (known as the balance factor) is at most one. Rotations are performed to maintain this balance during insertions and deletions, ensuring logarithmic time complexity for search, insert, and delete operations.

Q: What is a Red-Black tree?
A: A Red-Black tree is a type of self-balancing binary search tree with an additional constraint: each node is colored either red or black, and the tree must satisfy specific properties related to the colors and the paths from the root to the leaves. These properties ensure that the tree remains approximately balanced, providing logarithmic time complexity for search, insertion, and deletion operations.

Q: What is a skip list?
A: A skip list is a data structure that allows for efficient search, insertion, and deletion operations by using multiple layers of linked lists, where each layer skips over a portion of the elements in the layer below. Skip lists provide average-case logarithmic time complexity for these operations, offering an alternative to balanced trees.

Q: What is a trie?
A: A trie, or prefix tree, is a tree-like data structure used to store a dynamic set of strings where keys are usually strings. Each node in a trie represents a common prefix of the keys, and the edges represent individual characters. Tries are useful for tasks such as autocomplete and spell-checking due to their efficient prefix-based search capabilities.

Q: What is a union-find data structure?
A: The union-find data structure, also known as disjoint-set, is used to keep track of a partition of a set into disjoint subsets. It supports two primary operations: union (merging two subsets) and find (determining the representative of a subset). This data structure is commonly used in algorithms like Kruskal's for finding minimum spanning trees.

Q: What is a dynamic array?
A: A dynamic array is a data structure that allows for resizing of the array as elements are added or removed. Unlike static arrays, which have a fixed size, dynamic arrays can grow or shrink as needed, typically by allocating a larger or smaller contiguous block of memory and copying the existing elements to the new location.

Q: What is a linked list's time complexity for access operations?
A: A linked list's time complexity for access operations is O(n), where n is the number of elements in the list. This is because accessing an element requires traversing the list from the beginning (or end, in the case of a doubly linked list) to the desired position, which can be time-consuming for large lists.

Q: What is a priority queue?
A: A priority queue is an abstract data structure that stores elements with associated priorities and allows for efficient retrieval of the element with the highest (or lowest) priority. Priority queues can be implemented using heaps, binary search trees, or other structures and are used in scenarios such as scheduling and network traffic management.

Q: What is a circular queue?
A: A circular queue is a type of queue where the end of the queue is connected back to the beginning, forming a circular structure. This allows for efficient use of space by reusing the positions of dequeued elements for new enqueues, preventing the need for shifting elements and reducing wasted space.

Q: What is a deque?
A: A deque, or double-ended queue, is a linear data structure that allows for insertion and deletion of elements from both the front and the back. Deques are more versatile than standard queues and stacks, supporting operations at both ends efficiently, and can be implemented using arrays or linked lists.

Q: What is a binary heap?
A: A binary heap is a complete binary tree that satisfies the heap property, where in a max-heap, each parent node is greater than or equal to its child nodes, and in a min-heap, each parent node is less than or equal to its child nodes. Binary heaps are commonly used in priority queues and heap sort algorithms due to their efficient insertion and extraction of the maximum or minimum element.

Q: What is a segment tree?
A: A segment tree is a data structure used for efficiently performing range queries and updates on an array. It is built as a binary tree where each node represents a segment (or range) of the array, and operations like range sum queries or range minimum queries can be performed efficiently using this tree.

Q: What is a Fenwick tree (Binary Indexed Tree)?
A: A Fenwick tree, or Binary Indexed Tree, is a data structure that provides efficient support for prefix sum queries and updates on an array. It is a type of binary tree where each node maintains a cumulative frequency or sum, allowing for quick updates and queries with logarithmic time complexity.

Q: What is a hash set?
A: A hash set is a data structure that stores a collection of unique elements and uses a hash function to determine the index at which each element is stored. Hash sets provide average-case constant time complexity for operations such as insertion, deletion, and membership testing, and they are commonly used for quickly checking the presence of elements.

Q: What is a hash map?
A: A hash map, also known as a hash table, is a data structure that maps keys to values using a hash function to compute the index for storage. Hash maps support efficient retrieval, insertion, and deletion operations, with average-case constant time complexity, and are commonly used to implement associative arrays and dictionaries.

Q: What is a sparse matrix?
A: A sparse matrix is a matrix in which most of the elements are zero. Storing only the non-zero elements and their positions is an efficient way to represent and manipulate sparse matrices, as it saves memory and computational resources. Sparse matrices are used in various applications, including scientific computing and machine learning.

Q: What is a dense matrix?
A: A dense matrix is a matrix where most of the elements are non-zero. In dense matrices, all elements are stored and processed, as there are few zeros to optimize for. Dense matrices are commonly used in applications where the data is uniformly distributed and space optimization is not a significant concern.

Q: What is a k-ary tree?
A: A k-ary tree is a tree data structure where each node can have at most k children. It generalizes the concept of binary trees, where each node has at most two children. K-ary trees are used in various applications, including representing hierarchical data and in algorithms that require multiple branching factors.

Q: What is an adjacency matrix in graph theory?
A: An adjacency matrix is a square matrix used to represent a graph, where the rows and columns correspond to the vertices, and the entries indicate whether there is an edge between the corresponding vertices. In an undirected graph, the matrix is symmetric, while in a directed graph, it is not necessarily symmetric.

Q: What is an adjacency list in graph theory?
A: An adjacency list is a representation of a graph where each vertex maintains a list of its adjacent vertices. This data structure is efficient in terms of space, especially for sparse graphs, and is used to represent graphs where edges are stored in a list for each vertex rather than in a matrix.

Q: What is the purpose of a stack in function call management?
A: In function call management, a stack is used to keep track of function calls and local variables. Each time a function is called, a new stack frame is pushed onto the stack, containing the function’s parameters, local variables, and return address. When the function returns, its stack frame is popped, and control is transferred back to the calling function.

Q: What is a balanced tree?
A: A balanced tree is a type of tree data structure where the height of the tree is kept as small as possible to ensure efficient operations. Balanced trees, such as AVL trees and Red-Black trees, maintain balance criteria to ensure that the tree's height is logarithmic with respect to the number of nodes, providing efficient search, insertion, and deletion operations.

Q: What is a depth of a tree?
A: The depth of a tree is the number of edges from the root node to the deepest leaf node. It represents the longest path from the root to a leaf, and it is used to measure the overall height of the tree, which affects the performance of various tree operations.

Q: What is the height of a tree?
A: The height of a tree is the number of edges on the longest path from the root node to a leaf node. It is a measure of the tree’s maximum depth and affects the time complexity of operations like search, insertion, and deletion, with a greater height generally leading to slower operations.

Q: What is a parent node in a tree?
A: A parent node in a tree is a node that has one or more child nodes directly connected to it. The parent node is one level higher in the hierarchy than its child nodes. Each node in a tree, except the root, has exactly one parent node.

Q: What is a child node in a tree?
A: A child node in a tree is a node that is directly connected to another node (its parent) and is one level lower in the hierarchy. Each node in a tree, except the leaf nodes, can have one or more child nodes.

Q: What is a leaf node in a tree?
A: A leaf node in a tree is a node that does not have any children. Leaf nodes are located at the bottom level of the tree and are the endpoints of paths from the root. They are important for representing terminal data or final results in hierarchical structures.

Q: What is a subtree in a tree?
A: A subtree in a tree is a portion of the tree consisting of a node and all its descendants. Each node in a tree represents the root of a subtree that includes itself and all of its child nodes, allowing for operations and manipulations to be performed on specific sections of the tree.

Q: What is the difference between a singly linked list and a doubly linked list?
A: A singly linked list is a type of linked list where each node has a reference to the next node only, allowing for one-way traversal. A doubly linked list, on the other hand, has nodes with references to both the next and previous nodes, enabling bidirectional traversal and more efficient insertion and deletion operations from both ends.

Q: What is the time complexity of accessing an element in an array?
A: The time complexity of accessing an element in an array is O(1), or constant time, because array elements are stored in contiguous memory locations and can be accessed directly using their index. This allows for immediate retrieval of any element.

Q: What is the time complexity of inserting an element into a linked list?
A: The time complexity of inserting an element into a linked list depends on the position where the insertion occurs. If the insertion is at the beginning of the list, it is O(1), or constant time. Inserting at a specific position requires traversing the list, making it O(n), where n is the number of elements before the insertion point.

Q: What is the main advantage of using a hash table?
A: The main advantage of using a hash table is its ability to provide average-case constant time complexity, O(1), for key-based operations such as insertion, deletion, and lookup. This efficiency is achieved by using a hash function to map keys to indices in an underlying array.

Q: What is a binary search tree (BST)?
A: A binary search tree (BST) is a type of binary tree where each node has at most two children, and for each node, the left subtree contains only nodes with values less than the node’s value, while the right subtree contains only nodes with values greater than the node’s value. This property ensures efficient search, insertion, and deletion operations.

Q: What is an AVL tree?
A: An AVL tree is a self-balancing binary search tree where the difference in height between the left and right subtrees of any node is at most one. This balance ensures that the tree remains balanced, providing logarithmic time complexity for search, insertion, and deletion operations.

Q: What is a red-black tree?
A: A red-black tree is a self-balancing binary search tree with additional properties to maintain balance, such as each node being colored either red or black and adhering to rules that ensure no two red nodes are adjacent. These properties guarantee that the tree remains approximately balanced, ensuring efficient search, insertion, and deletion operations.

Q: What is a B-tree?
A: A B-tree is a self-balancing tree data structure used for maintaining sorted data and allowing searches, sequential access, insertions, and deletions in logarithmic time. It is commonly used in databases and file systems due to its ability to efficiently handle large amounts of data with multiple levels of nodes.

Q: What is a heap?
A: A heap is a specialized binary tree-based data structure that satisfies the heap property, where in a max-heap, the value of each node is greater than or equal to the values of its children, and in a min-heap, the value of each node is less than or equal to the values of its children. Heaps are commonly used in priority queues and heap sort algorithms.

Q: What is a disjoint-set (union-find) data structure?
A: A disjoint-set, or union-find data structure, manages a partition of a set into disjoint subsets and supports two primary operations: union (merging two subsets) and find (determining the representative of a subset). It is used in algorithms for finding connected components and in network connectivity problems.

Q: What is a graph traversal algorithm?
A: A graph traversal algorithm systematically visits all the nodes and edges in a graph. Common traversal algorithms include Depth-First Search (DFS), which explores as far as possible along each branch before backtracking, and Breadth-First Search (BFS), which explores all neighbors at the present depth level before moving on to nodes at the next depth level.

Q: What is a depth-first search (DFS)?
A: Depth-first search (DFS) is a graph traversal algorithm that explores as far as possible along each branch before backtracking. It uses a stack (either explicitly or via recursion) to keep track of nodes to be visited, allowing it to explore deeply into the graph before moving to the next branch.

Q: What is a breadth-first search (BFS)?
A: Breadth-first search (BFS) is a graph traversal algorithm that explores all nodes at the present depth level before moving on to nodes at the next depth level. It uses a queue to keep track of nodes to be visited, ensuring that nodes are explored in the order they are discovered.

Q: What is a topological sort?
A: Topological sort is an ordering of the vertices in a directed acyclic graph (DAG) such that for every directed edge u → v, vertex u comes before vertex v in the ordering. It is commonly used in scheduling problems and dependency resolution, where tasks must be performed in a specific order.

Q: What is a cycle in a graph?
A: A cycle in a graph is a path that starts and ends at the same vertex, with all other vertices in the path being distinct. Cycles are important in graph theory as they can indicate feedback loops and cycles of dependencies, and their detection is crucial in algorithms for tasks such as scheduling and resource allocation.

Q: What is a bipartite graph?
A: A bipartite graph is a graph whose vertices can be divided into two disjoint sets such that no two vertices within the same set are adjacent. Bipartite graphs are used in various applications, including modeling relationships and network flow problems, and can be characterized by the absence of odd-length cycles.

Q: What is the difference between a directed and an undirected graph?
A: A directed graph (digraph) is a graph where edges have a direction, going from one vertex to another, while an undirected graph has edges with no direction, meaning the connection is mutual. This difference affects how algorithms traverse and process the graph, with directed graphs requiring consideration of edge direction.

Q: What is a graph's adjacency matrix used for?
A: A graph's adjacency matrix is used to represent the connections between vertices in a graph. Each element in the matrix indicates whether there is an edge between a pair of vertices, with the matrix being symmetric for undirected graphs and non-symmetric for directed graphs.

Q: What is the difference between a static and a dynamic data structure?
A: A static data structure has a fixed size and cannot change during runtime, such as arrays. In contrast, a dynamic data structure can grow or shrink as needed, such as linked lists or dynamic arrays. Dynamic data structures provide greater flexibility in managing memory and handling varying data sizes.

Q: What is the purpose of a data structure in computer science?
A: The purpose of a data structure in computer science is to organize, manage, and store data efficiently, enabling effective access and modification. Data structures provide the foundation for algorithms and help in optimizing performance for various operations, such as searching, sorting, and managing data.

Q: What is a linear data structure?
A: A linear data structure is a type of data structure where elements are arranged sequentially, and each element is connected to its previous and next element. Examples include arrays, linked lists, stacks, and queues. Linear data structures allow for straightforward traversal and manipulation of elements.

Q: What is a non-linear data structure?
A: A non-linear data structure is a type of data structure where elements are not arranged sequentially but are instead connected in a hierarchical or graph-like manner. Examples include trees and graphs. Non-linear data structures are used to represent complex relationships and hierarchical data.

Q: What is the main use of a stack?
A: The main use of a stack is to manage data in a Last In, First Out (LIFO) manner, where the most recently added element is the first to be removed. Stacks are commonly used in algorithms for expression evaluation, function call management, and backtracking problems.

Q: What is the main use of a queue?
A: The main use of a queue is to manage data in a First In, First Out (FIFO) manner, where the earliest added element is the first to be removed. Queues are commonly used in scenarios like scheduling tasks, handling requests, and managing resources in systems.

Q: What is the difference between a queue and a stack?
A: A queue is a linear data structure that follows the First In, First Out (FIFO) principle, where elements are added at the back and removed from the front. A stack follows the Last In, First Out (LIFO) principle, where elements are added and removed from the top. This difference affects how elements are managed and accessed.

Q: What is a doubly linked list?
A: A doubly linked list is a type of linked list where each node contains references to both the previous and next nodes. This allows for bidirectional traversal and more efficient insertions and deletions compared to a singly linked list, where nodes only point to the next node.

Q: What is a singly linked list?
A: A singly linked list is a type of linked list where each node contains a reference to the next node in the sequence. This allows for efficient insertion and deletion at the head or tail of the list, but traversal is unidirectional from the head to the end of the list.

Q: What is a circular linked list?
A: A circular linked list is a variation of a linked list where the last node points back to the first node, forming a circular structure. This allows for continuous traversal of the list without encountering a null reference and is useful in scenarios requiring repeated processing of the list elements.

Q: What is a priority queue used for?
A: A priority queue is used to manage a collection of elements where each element has a priority, and operations are performed based on the priority rather than the order of insertion. Priority queues are used in algorithms like Dijkstra's shortest path and in scheduling systems to manage tasks based on their urgency.

Q: What is a binary tree?
A: A binary tree is a tree data structure where each node has at most two children, referred to as the left and right child. Binary trees are used in various applications, including binary search trees for efficient data retrieval and heaps for priority queue implementations.

Q: What is a max-heap?
A: A max-heap is a type of binary heap where the value of each node is greater than or equal to the values of its children. This property ensures that the maximum value is always at the root, making it efficient for operations that require quick access to the maximum element, such as priority queues.

Q: What is a min-heap?
A: A min-heap is a type of binary heap where the value of each node is less than or equal to the values of its children. This property ensures that the minimum value is always at the root, making it efficient for operations that require quick access to the minimum element, such as priority queues.

Q: What is a hash function used for?
A: A hash function is used to map data of arbitrary size to fixed-size values, typically used in hash tables. The hash function converts a key into an index in an array, allowing for efficient data retrieval, insertion, and deletion operations by minimizing collisions and distributing keys uniformly.

Q: What is a hash collision?
A: A hash collision occurs when two different keys produce the same hash value and are mapped to the same index in a hash table. To handle collisions, techniques such as chaining (using linked lists) or open addressing (probing) are used to store and retrieve elements effectively.

Q: What is chaining in hash tables?
A: Chaining is a collision resolution technique in hash tables where each index in the hash table points to a linked list of elements that hash to the same index. This allows multiple elements to be stored at the same index, handling collisions and providing efficient retrieval.

Q: What is open addressing in hash tables?
A: Open addressing is a collision resolution technique in hash tables where, upon a collision, the algorithm probes or searches for the next available slot in the hash table. Techniques such as linear probing, quadratic probing, and double hashing are used to determine the next slot to check.

Q: What is the purpose of a cache in computer systems?
A: The purpose of a cache in computer systems is to temporarily store frequently accessed data to reduce access time and improve performance. Caches are used to bridge the speed gap between fast processors and slower main memory or storage, allowing for quicker data retrieval and reduced latency.

Q: What is the difference between primary and secondary storage?
A: Primary storage refers to memory that is directly accessible by the CPU, such as RAM (Random Access Memory), and is used for fast access to data and instructions currently in use. Secondary storage refers to non-volatile storage, such as hard drives or SSDs, used for long-term data storage and retrieval.

Q: What is the purpose of an index in a database?
A: The purpose of an index in a database is to improve the speed of data retrieval operations by creating a data structure that allows for quick searching and sorting. Indexes help in optimizing query performance and reducing the time required to locate specific data within a database table.

Q: What is normalization in database design?
A: Normalization in database design is the process of organizing data to minimize redundancy and improve data integrity. It involves dividing a database into multiple related tables and ensuring that data dependencies are properly managed, typically following normal forms to achieve a well-structured schema.

Q: What is denormalization in database design?
A: Denormalization in database design is the process of introducing redundancy into a database schema to improve performance, particularly for read-heavy operations. It involves combining tables or adding redundant data to reduce the number of joins required for queries, potentially improving query response times.

Q: What is a foreign key in a database?
A: A foreign key is a field or a set of fields in a database table that establishes a link between data in two tables. It refers to the primary key of another table, enforcing referential integrity by ensuring that values in the foreign key column match values in the referenced table’s primary key.

Q: What is the purpose of a transaction in a database?
A: The purpose of a transaction in a database is to ensure that a sequence of operations is executed as a single unit of work, maintaining data integrity and consistency. Transactions are designed to be atomic, consistent, isolated, and durable (ACID properties), meaning they are fully completed or fully rolled back if any part fails.

Q: What is the ACID property in database transactions?
A: The ACID property in database transactions stands for Atomicity, Consistency, Isolation, and Durability. These properties ensure that transactions are processed reliably: Atomicity ensures all operations are completed or none are; Consistency ensures the database remains in a valid state; Isolation ensures transactions do not interfere with each other; Durability ensures completed transactions are permanently saved.

Q: What is an entity-relationship (ER) model?
A: An entity-relationship (ER) model is a diagrammatic approach to database design that visually represents entities (objects or concepts) and their relationships within a database. ER models use entities, attributes, and relationships to design a structured schema for a database, aiding in understanding and organizing data.

Q: What is an entity in an ER model?
A: An entity in an ER model represents a distinct object or concept in the database that has a set of attributes. Entities are typically represented as rectangles in ER diagrams and can be objects like people, places, or events, and they are used to define the data to be stored in the database.

Q: What is a relationship in an ER model?
A: A relationship in an ER model describes the associations between entities in a database. Relationships illustrate how entities interact with one another, such as one-to-one, one-to-many, or many-to-many associations. They are typically represented as diamonds or lines connecting entities in ER diagrams.

Q: What is a schema in a database?
A: A schema in a database is the overall structure and organization of the database, including the definitions of tables, columns, relationships, constraints, and other database objects. It provides a blueprint for how data is stored, organized, and accessed within the database system.

Q: What is a data model?
A: A data model is a conceptual framework that defines the structure, relationships, and constraints of data in a database. It provides a way to describe and organize data and its relationships, guiding the design and implementation of database systems and ensuring data consistency and integrity.

Q: What is a data dictionary?
A: A data dictionary is a repository that contains metadata about the data in a database, such as definitions of tables, columns, data types, constraints, and relationships. It provides documentation and details about the database schema and helps in managing and understanding the structure of the data.

Q: What is a stored procedure in a database?
A: A stored procedure is a precompiled collection of SQL statements and optional control-flow statements that are stored and executed on the database server. Stored procedures can encapsulate complex logic, perform multiple operations, and improve performance and security by reducing repetitive code and controlling access.

Q: What is a trigger in a database?
A: A trigger is a database object that automatically executes a predefined set of actions in response to certain events, such as insertions, updates, or deletions on a table. Triggers are used to enforce business rules, maintain data integrity, and automate tasks within the database.

Q: What is a view in a database?
A: A view in a database is a virtual table that provides a customized representation of data from one or more tables. Views are defined by a query and allow users to access and manipulate data without altering the underlying tables, providing a way to simplify complex queries and enhance security.

Q: What is a materialized view?
A: A materialized view is a database object that stores the results of a query physically, rather than computing them on-the-fly like a regular view. Materialized views improve query performance by providing precomputed results, but they require periodic refreshing to stay up-to-date with the underlying data.

Q: What is database normalization?
A: Database normalization is the process of organizing a database schema to reduce redundancy and improve data integrity. It involves dividing large tables into smaller, related tables and applying normalization rules, or normal forms, to ensure that the database structure is efficient and minimizes duplication of data.

Q: What is denormalization?
A: Denormalization is the process of introducing redundancy into a database schema to improve performance, particularly for read-heavy operations. It involves combining tables or adding redundant data to reduce the number of joins required for queries, potentially improving query response times at the cost of increased storage and maintenance complexity.