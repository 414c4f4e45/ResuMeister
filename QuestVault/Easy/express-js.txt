Q: What is Express.js?
A: Express.js is a minimal and flexible Node.js web application framework that provides a robust set of features for building web and mobile applications. It simplifies the creation of server-side applications by offering utilities for routing, middleware integration, and request handling, making it easier to build and manage server-side logic in a Node.js environment.

Q: How do you install Express.js?
A: Express.js can be installed using npm, the Node.js package manager. You simply run the command npm install express in your project directory to add it to your dependencies. This installs the Express module, which you can then require in your application to start building your web server.

Q: How do you create a basic Express.js server?
A: To create a basic Express.js server, first require the Express module and then create an instance of it. Define a route using app.get() to handle requests to a specific endpoint, and start the server with app.listen(). For example:

javascript
Copy code
const express = require('express');
const app = express();
app.get('/', (req, res) => res.send('Hello World!'));
app.listen(3000, () => console.log('Server running on port 3000'));
Q: What is middleware in Express.js?
A: Middleware in Express.js is a function that executes during the request-response cycle, processing requests before they reach route handlers. Middleware functions can modify the request and response objects, end the request-response cycle, or call the next middleware function in the stack. They are essential for tasks such as logging, authentication, and parsing request bodies.

Q: How can you use middleware in Express.js?
A: Middleware in Express.js can be used by applying it globally to all routes with app.use() or to specific routes by passing it as a second argument to route methods. For example:

javascript
Copy code
app.use(express.json()); // Applies middleware globally
app.get('/route', (req, res, next) => { /* middleware logic */ next(); });
Q: What is the purpose of app.use() in Express.js?
A: The app.use() function in Express.js is used to register middleware functions that are executed for every incoming request. It can be used to set up global middleware that applies to all routes or to set up route-specific middleware by specifying a path as the first argument.

Q: How do you handle GET requests in Express.js?
A: To handle GET requests in Express.js, use the app.get() method, which defines a route that responds to HTTP GET requests. You specify the route path and provide a callback function that handles the request and sends a response. For example:

javascript
Copy code
app.get('/path', (req, res) => {
  res.send('This is a GET request handler.');
});
Q: How do you handle POST requests in Express.js?
A: To handle POST requests in Express.js, use the app.post() method, which defines a route that responds to HTTP POST requests. You specify the route path and provide a callback function that processes the request body and sends a response. For example:

javascript
Copy code
app.post('/submit', (req, res) => {
  // Process request.body
  res.send('This is a POST request handler.');
});
Q: How can you parse JSON request bodies in Express.js?
A: You can parse JSON request bodies in Express.js by using the express.json() middleware. This middleware automatically parses incoming JSON payloads and makes the parsed data available on req.body. Include it in your middleware stack with app.use(express.json());.

Q: What is a route in Express.js?
A: A route in Express.js is a defined endpoint that maps a specific URL path and HTTP method to a handler function. Routes handle incoming requests and determine how the server responds. They are defined using methods like app.get(), app.post(), app.put(), and app.delete().

Q: How do you serve static files in Express.js?
A: To serve static files in Express.js, use the express.static() middleware. This middleware serves files from a specified directory and makes them accessible via URL. For example:

javascript
Copy code
app.use(express.static('public'));
This serves files from the public directory.

Q: How do you handle errors in Express.js?
A: To handle errors in Express.js, define an error-handling middleware function with four parameters: err, req, res, and next. This middleware should be added after all other middleware and routes. For example:

javascript
Copy code
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send('Something broke!');
});
Q: How do you redirect requests in Express.js?
A: To redirect requests in Express.js, use the res.redirect() method. This method sends an HTTP response with a status code of 302 (or another status code) and redirects the client to the specified URL. For example:

javascript
Copy code
app.get('/old-route', (req, res) => res.redirect('/new-route'));
Q: What is the purpose of res.send() in Express.js?
A: The res.send() method in Express.js is used to send a response to the client. It can send various types of data, such as strings, objects, or buffers. This method also sets the appropriate headers and status code automatically based on the type of data sent.

Q: How do you set HTTP headers in Express.js?
A: To set HTTP headers in Express.js, use the res.set() method or res.header() method. Both methods allow you to specify headers that will be included in the HTTP response. For example:

javascript
Copy code
res.set('Content-Type', 'application/json');
res.header('X-Custom-Header', 'value');
Q: What is the difference between res.send() and res.json()?
A: The res.send() method sends a response to the client with the specified data type, while the res.json() method specifically sends JSON-formatted data. res.json() automatically sets the Content-Type header to application/json and serializes JavaScript objects to JSON format.

Q: How can you handle query parameters in Express.js?
A: Query parameters in Express.js can be accessed through the req.query object, which contains the parsed query string parameters from the URL. For example, for a URL like /search?term=node, you can access the query parameter using req.query.term.

Q: How do you handle URL parameters in Express.js?
A: URL parameters in Express.js are accessed using the req.params object. Parameters are defined in route paths using : syntax. For example:

javascript
Copy code
app.get('/user/:id', (req, res) => {
  const userId = req.params.id;
  res.send(`User ID is ${userId}`);
});
Q: How do you use template engines with Express.js?
A: To use template engines with Express.js, install the desired template engine (e.g., EJS, Pug, Handlebars) and set it as the view engine using app.set('view engine', 'engineName'). Then, use res.render() to render views with the template engine. For example:

javascript
Copy code
app.set('view engine', 'ejs');
app.get('/', (req, res) => res.render('index', { title: 'Home' }));
Q: What is the purpose of the app.locals object in Express.js?
A: The app.locals object in Express.js is used to store application-wide variables that are accessible to all routes and views. It is useful for storing data or configuration that should be available throughout the application. For example, app.locals.title = 'My App'; makes title accessible in all views.

Q: How can you create route parameters in Express.js?
A: Route parameters in Express.js are created by defining parts of the route path with : syntax. For example, in the route /user/:id, :id is a route parameter that can be accessed via req.params.id in the route handler. Route parameters are useful for capturing dynamic values from the URL.

Q: How do you configure Express.js to use a specific port?
A: Express.js can be configured to use a specific port by passing the desired port number to the app.listen() method. For example, app.listen(3000, () => console.log('Server running on port 3000')); configures the server to listen on port 3000.

Q: What are Express.js route handlers?
A: Express.js route handlers are functions that define how the server responds to requests for specific routes and HTTP methods. They take req (request) and res (response) objects as parameters and contain the logic for processing requests and sending responses.

Q: How can you serve HTML files using Express.js?
A: To serve HTML files using Express.js, you can use the express.static() middleware to serve static files from a directory, or use res.sendFile() to send a specific HTML file in response to a request. For example:

javascript
Copy code
app.use(express.static('public'));
app.get('/page', (req, res) => res.sendFile(__dirname + '/views/page.html'));
Q: What is the purpose of app.route() in Express.js?
A: The app.route() method in Express.js provides a way to define multiple HTTP methods for a single route path. It allows for cleaner and more organized route definitions, especially when handling different methods (GET, POST, etc.) for the same route. For example:

javascript
Copy code
app.route('/users')
  .get((req, res) => res.send('GET users'))
  .post((req, res) => res.send('POST users'));
Q: How do you enable CORS in an Express.js application?
A: To enable CORS (Cross-Origin Resource Sharing) in an Express.js application, use the cors middleware. First, install the cors package using npm install cors, then include it in your application with app.use(require('cors')());. This allows your server to handle cross-origin requests.

Q: What is the purpose of the res.status() method in Express.js?
A: The res.status() method in Express.js is used to set the HTTP status code of the response. It allows you to specify the status code that should be sent to the client, which helps indicate the result of the request, such as success (200), client error (404), or server error (500).

Q: How do you handle form submissions in Express.js?
A: To handle form submissions in Express.js, you need to use middleware to parse the form data. For example, the express.urlencoded() middleware parses URL-encoded data (from forms) and makes it available in req.body. You can then handle the submitted data in your route handler.

Q: What is the app.all() method used for in Express.js?
A: The app.all() method in Express.js is used to define a handler for all HTTP methods (GET, POST, PUT, DELETE, etc.) for a specific route path. This is useful when you want to apply the same logic regardless of the request method. For example:

javascript
Copy code
app.all('/path', (req, res) => res.send('Handled all methods'));
Q: How can you set up a simple API endpoint using Express.js?
A: To set up a simple API endpoint using Express.js, define a route with the desired HTTP method and provide a callback function to handle requests. For example, to create a GET endpoint that returns JSON data:

javascript
Copy code
app.get('/api/data', (req, res) => {
  res.json({ message: 'This is an API endpoint' });
});
Q: What is the purpose of the req.body object in Express.js?
A: The req.body object in Express.js contains data sent in the body of an HTTP request, typically from POST or PUT requests. It is used to access and process form data, JSON payloads, or other request bodies, provided the appropriate middleware (e.g., express.json() or express.urlencoded()) is used to parse the data.

Q: How can you define a route that matches multiple paths in Express.js?
A: To define a route that matches multiple paths in Express.js, use route parameters, regular expressions, or multiple route definitions. For example, using multiple route definitions:

javascript
Copy code
app.get(['/path1', '/path2'], (req, res) => res.send('Matched multiple paths'));
Q: How do you create a router in Express.js?
A: To create a router in Express.js, use the express.Router() function to create a new router instance. You can then define routes and middleware on this router and use app.use() to integrate it into your application. For example:

javascript
Copy code
const router = express.Router();
router.get('/route', (req, res) => res.send('Router route'));
app.use('/api', router);
Q: How do you implement basic authentication in Express.js?
A: Basic authentication in Express.js can be implemented using middleware that checks for authentication credentials in the request headers. You can create custom middleware to verify the Authorization header and validate credentials. For example:

javascript
Copy code
app.use((req, res, next) => {
  const auth = req.headers.authorization;
  if (auth === 'Basic dXNlcjpwYXNzd29yZA==') { // base64 encoded 'user:password'
    next();
  } else {
    res.status(401).send('Unauthorized');
  }
});
Q: How can you handle file uploads in Express.js?
A: To handle file uploads in Express.js, use middleware like multer. First, install multer with npm install multer, then configure it to handle file uploads. For example:

javascript
Copy code
const multer = require('multer');
const upload = multer({ dest: 'uploads/' });
app.post('/upload', upload.single('file'), (req, res) => {
  res.send('File uploaded');
});
Q: What is the purpose of the req.query object in Express.js?
A: The req.query object in Express.js contains the parsed query string parameters from the URL of an incoming request. It is used to access parameters sent in the query string, such as ?search=term, and is typically used for filtering or searching data.

Q: How do you set response headers in Express.js?
A: To set response headers in Express.js, use the res.set() or res.header() method. These methods allow you to specify headers that will be included in the HTTP response. For example:

javascript
Copy code
res.set('X-Custom-Header', 'value');
res.header('Cache-Control', 'no-cache');
Q: How can you serve dynamic content with Express.js?
A: To serve dynamic content with Express.js, use template engines to render views based on dynamic data. Configure the template engine (e.g., EJS, Pug) and use res.render() to generate and send HTML content with data passed from the server. For example:

javascript
Copy code
app.get('/dynamic', (req, res) => res.render('template', { data: 'Dynamic content' }));
Q: How do you use query parameters with req.query in Express.js?
A: Query parameters are accessed using req.query in Express.js, which is an object containing key-value pairs of the query string. For example, for a URL like /search?term=node, req.query.term would return 'node', allowing you to process query parameters in your route handlers.

Q: What is the res.sendFile() method used for in Express.js?
A: The res.sendFile() method in Express.js is used to send a file as a response to the client. It takes the path of the file as an argument and sends the file's content, such as HTML or image files, to the client. For example:

javascript
Copy code
res.sendFile(__dirname + '/public/index.html');
Q: How can you manage session data in Express.js?
A: To manage session data in Express.js, use the express-session middleware. Install it with npm install express-session and configure it in your application. This middleware stores session data on the server and provides a way to manage user sessions and state across requests.

Q: What is the app.listen() method used for in Express.js?
A: The app.listen() method in Express.js is used to start the server and listen for incoming requests on a specified port. It takes the port number and an optional callback function as arguments. For example:

javascript
Copy code
app.listen(3000, () => console.log('Server running on port 3000'));
Q: How do you define route parameters in Express.js?
A: Route parameters in Express.js are defined by including placeholders in the route path using : syntax. These parameters are accessible in the route handler through req.params. For example, in the route /user/:id, the id parameter can be accessed via req.params.id.

Q: What is app.use() used for in Express.js?
A: The app.use() method in Express.js is used to apply middleware functions to incoming requests. It can be used to set up global middleware that applies to all routes or route-specific middleware by specifying a path as the first argument. For example:

javascript
Copy code
app.use(express.json()); // Applies middleware globally
app.use('/api', apiRouter); // Applies middleware to /api routes
Q: How do you create a route with multiple methods in Express.js?
A: To create a route with multiple methods in Express.js, use app.route() to define different HTTP methods for the same route path. For example:

javascript
Copy code
app.route('/users')
  .get((req, res) => res.send('GET users'))
  .post((req, res) => res.send('POST users'));
Q: What is the purpose of the req.params object in Express.js?
A: The req.params object in Express.js contains route parameters that are part of the URL path. These parameters are defined in the route path using : syntax and are used to capture dynamic values from the URL, which can then be accessed and used in route handlers.

Q: How do you handle different content types in Express.js?
A: To handle different content types in Express.js, use appropriate middleware for parsing request bodies. For JSON content, use express.json(). For URL-encoded data, use express.urlencoded(). Additionally, you can set the Content-Type header to specify the type of content being sent in responses.

Q: How can you set up a basic Express.js project structure?
A: A basic Express.js project structure typically includes a server.js or app.js file as the entry point, a routes directory for route definitions, a controllers directory for business logic, and a views directory for template files. You may also include a public directory for static assets.

Q: How do you handle 404 errors in Express.js?
A: To handle 404 errors in Express.js, define a middleware function at the end of your route definitions that catches any requests that do not match existing routes. This middleware should be defined after all other routes and middleware, and it typically sends a 404 response. For example:

javascript
Copy code
app.use((req, res) => res.status(404).send('Not Found'));
Q: What is the app.use(express.json()) middleware used for?
A: The app.use(express.json()) middleware in Express.js is used to parse incoming request bodies with JSON payloads. It makes the JSON data available in req.body, allowing you to easily handle and process JSON data sent in POST or PUT requests.

Q: How do you create custom middleware in Express.js?
A: To create custom middleware in Express.js, define a function that takes req, res, and next parameters. Inside the function, you can perform operations such as logging, authentication, or modifying request objects, and then call next() to pass control to the next middleware or route handler. For example:

javascript
Copy code
function customMiddleware(req, res, next) {
  console.log('Custom middleware executed');
  next();
}
app.use(customMiddleware);
Q: How do you use environment variables in an Express.js application?
A: To use environment variables in an Express.js application, you can use the dotenv package. Install it with npm install dotenv, create a .env file with your variables, and include require('dotenv').config(); at the top of your main file. Access variables using process.env.VARIABLE_NAME.

Q: How can you serve static files in Express.js?
A: To serve static files in Express.js, use the express.static() middleware. This middleware serves files from a specified directory. For example, to serve files from a public directory, use:

javascript
Copy code
app.use(express.static('public'));
Q: What is the res.json() method used for in Express.js?
A: The res.json() method in Express.js is used to send a JSON response to the client. It automatically sets the Content-Type header to application/json and serializes the provided JavaScript object or array into a JSON string.

Q: How do you set up logging in an Express.js application?
A: To set up logging in an Express.js application, you can use middleware like morgan. Install it with npm install morgan, and then include it in your application with app.use(require('morgan')('dev'));. This will log HTTP requests to the console in a predefined format.

Q: How do you handle errors in Express.js?
A: To handle errors in Express.js, use error-handling middleware defined with four parameters: err, req, res, and next. This middleware should be placed after all other middleware and route handlers. For example:

javascript
Copy code
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send('Something broke!');
});
Q: What is the res.redirect() method used for in Express.js?
A: The res.redirect() method in Express.js is used to redirect the client to a different URL. It sends a 302 status code by default and includes the new URL in the Location header, instructing the client to make a new request to the specified URL.

Q: How can you test Express.js routes?
A: To test Express.js routes, use testing frameworks like Mocha and Chai along with supertest. Install these packages and write test cases that simulate HTTP requests to your routes and verify responses. For example:

javascript
Copy code
const request = require('supertest');
const app = require('../app');
describe('GET /route', () => {
  it('should return 200 OK', (done) => {
    request(app)
      .get('/route')
      .expect(200, done);
  });
});
Q: How do you use the res.send() method in Express.js?
A: The res.send() method in Express.js is used to send a response to the client. It can send various types of content, including strings, objects, arrays, and buffers. The method sets the Content-Type header based on the data type provided.

Q: What is the purpose of req.method in Express.js?
A: The req.method property in Express.js contains the HTTP method used for the request, such as GET, POST, PUT, DELETE, etc. It helps determine the type of request being made and can be used to implement logic based on the method.

Q: How do you handle multipart form data in Express.js?
A: To handle multipart form data in Express.js, use the multer middleware. Install it with npm install multer and configure it to handle file uploads. For example:

javascript
Copy code
const multer = require('multer');
const upload = multer({ dest: 'uploads/' });
app.post('/upload', upload.single('file'), (req, res) => {
  res.send('File uploaded');
});
Q: How can you set a custom response status code in Express.js?
A: To set a custom response status code in Express.js, use the res.status() method before sending the response. For example, to set a 404 status code for a not-found error:

javascript
Copy code
res.status(404).send('Not Found');
Q: What is the purpose of req.headers in Express.js?
A: The req.headers object in Express.js contains HTTP headers sent by the client. It is used to access information such as content type, authorization tokens, and user-agent strings, which can be useful for processing requests and performing conditional logic.

Q: How do you use query parameters in a route handler in Express.js?
A: Query parameters can be accessed in a route handler using req.query, which is an object containing key-value pairs from the query string. For example, for a URL /search?term=node, you can access the term parameter with req.query.term.

Q: How do you set up middleware for specific routes in Express.js?
A: To set up middleware for specific routes in Express.js, use app.use() with a route path as the first argument. This middleware will only apply to requests that match the specified route. For example:

javascript
Copy code
app.use('/api', middlewareFunction);
Q: What is the res.sendStatus() method used for in Express.js?
A: The res.sendStatus() method in Express.js is used to send a response with a specific HTTP status code and a corresponding message. It sets the status code and sends the status text as the response body. For example:

javascript
Copy code
res.sendStatus(404); // Sends a 404 Not Found response
Q: How can you parse JSON bodies in Express.js?
A: To parse JSON bodies in Express.js, use the express.json() middleware. This middleware parses incoming request bodies with JSON payloads and makes the parsed data available in req.body. For example:

javascript
Copy code
app.use(express.json());
Q: How do you define and use environment variables in an Express.js app?
A: Define environment variables in a .env file and use the dotenv package to load them. Install dotenv with npm install dotenv and include it at the top of your main file with require('dotenv').config();. Access variables using process.env.VARIABLE_NAME.

Q: How do you handle form data submission in Express.js?
A: To handle form data submission in Express.js, use express.urlencoded() middleware to parse URL-encoded form data. The parsed data is available in req.body. For example:

javascript
Copy code
app.use(express.urlencoded({ extended: true }));
app.post('/submit', (req, res) => {
  const formData = req.body;
  res.send('Form submitted');
});
Q: How do you use the res.sendFile() method to serve static files?
A: The res.sendFile() method is used to send a file as a response to the client. Specify the file path and send the file's content directly. For example:

javascript
Copy code
app.get('/download', (req, res) => {
  res.sendFile(__dirname + '/files/sample.pdf');
});
Q: What is the purpose of the app.param() method in Express.js?
A: The app.param() method in Express.js is used to define middleware that runs for specific route parameters. It allows you to process or validate route parameters before handling the main route logic. For example:

javascript
Copy code
app.param('id', (req, res, next, id) => {
  req.id = id; // Process the parameter
  next();
});
app.get('/item/:id', (req, res) => {
  res.send(`Item ID: ${req.id}`);
});
Q: How do you create and use custom error-handling middleware in Express.js?
A: To create custom error-handling middleware in Express.js, define a middleware function with four parameters: err, req, res, and next. This middleware should be placed after all other route handlers. Use it to handle and respond to errors. For example:

javascript
Copy code
app.use((err, req, res, next) => {
  console.error(err.message);
  res.status(500).send('Internal Server Error');
});
Q: How can you use the res.send() method to return various types of responses?
A: The res.send() method in Express.js can return different types of responses, such as strings, objects, arrays, or buffers. It automatically sets the appropriate Content-Type header based on the response data type. For example:

javascript
Copy code
res.send('Hello World'); // Sends a string
res.send({ message: 'Hello World' }); // Sends an object
res.send([1, 2, 3]); // Sends an array
Q: How do you handle file uploads in Express.js?
A: To handle file uploads in Express.js, use the multer middleware. Configure multer to specify the destination directory and file handling logic. For example:

javascript
Copy code
const multer = require('multer');
const upload = multer({ dest: 'uploads/' });
app.post('/upload', upload.single('file'), (req, res) => {
  res.send('File uploaded');
});
Q: How do you set up route parameters in Express.js?
A: Route parameters in Express.js are defined using a colon : in the route path. For example, app.get('/user/:id', (req, res) => { ... }) defines a route with a parameter id. Access the parameter using req.params.id.

Q: How do you send JSON responses in Express.js?
A: To send JSON responses in Express.js, use the res.json() method. This method sets the Content-Type header to application/json and serializes the provided JavaScript object or array into a JSON string. For example:

javascript
Copy code
res.json({ message: 'Hello World' });
Q: What is the app.get() method used for in Express.js?
A: The app.get() method in Express.js is used to define a route handler for HTTP GET requests. It takes a path and a callback function that handles requests to that path. For example:

javascript
Copy code
app.get('/home', (req, res) => {
  res.send('Welcome to the homepage');
});
Q: How do you use middleware functions in Express.js?
A: Middleware functions in Express.js are used to process requests and responses before reaching the route handlers. Use app.use() to apply middleware globally or to specific routes. For example:

javascript
Copy code
app.use(express.json()); // Applies middleware to all routes
app.use('/api', apiMiddleware); // Applies middleware to routes starting with '/api'
Q: How do you implement a route that handles both GET and POST requests?
A: To implement a route that handles both GET and POST requests in Express.js, define separate route handlers for each method. For example:

javascript
Copy code
app.get('/data', (req, res) => {
  res.send('GET request');
});
app.post('/data', (req, res) => {
  res.send('POST request');
});
Q: How do you use the app.listen() method in Express.js?
A: The app.listen() method in Express.js starts the server and listens for incoming requests on a specified port. For example:

javascript
Copy code
app.listen(3000, () => {
  console.log('Server is running on port 3000');
});
Q: How can you set custom HTTP headers in Express.js responses?
A: To set custom HTTP headers in Express.js responses, use the res.set() or res.header() method. For example:

javascript
Copy code
res.set('Custom-Header', 'HeaderValue');
res.header('Another-Header', 'AnotherValue');
res.send('Response with custom headers');
Q: How do you use query parameters in Express.js?
A: Query parameters in Express.js are accessed using req.query, which is an object containing key-value pairs from the query string. For example, for a URL /search?term=node, access the term parameter with req.query.term.

Q: How do you configure CORS in Express.js?
A: To configure CORS (Cross-Origin Resource Sharing) in Express.js, use the cors middleware. Install it with npm install cors and include it in your application. For example:

javascript
Copy code
const cors = require('cors');
app.use(cors());
Q: How do you handle form submissions in Express.js?
A: To handle form submissions in Express.js, use express.urlencoded() middleware to parse URL-encoded form data. Access the submitted data via req.body. For example:

javascript
Copy code
app.use(express.urlencoded({ extended: true }));
app.post('/submit', (req, res) => {
  const formData = req.body;
  res.send('Form submitted');
});
Q: What is the purpose of the req.body object in Express.js?
A: The req.body object in Express.js contains data sent in the body of the request. It is typically used with POST or PUT requests to access and process data submitted by the client.

Q: How do you use route handlers with parameters in Express.js?
A: Route handlers with parameters are defined using a colon : in the route path. Access parameters using req.params. For example:

javascript
Copy code
app.get('/user/:id', (req, res) => {
  const userId = req.params.id;
  res.send(`User ID: ${userId}`);
});
Q: How can you handle errors in Express.js applications?
A: To handle errors in Express.js applications, define an error-handling middleware with four parameters: err, req, res, and next. This middleware should be placed after all other route handlers. For example:

javascript
Copy code
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send('Something went wrong!');
});
Q: How do you serve static files in Express.js?
A: To serve static files in Express.js, use the express.static() middleware to specify the directory containing the files. For example:

javascript
Copy code
app.use(express.static('public'));
Q: How do you use query parameters in Express.js routes?
A: Query parameters are accessed using req.query, which provides an object containing the query string parameters. For example:

javascript
Copy code
app.get('/search', (req, res) => {
  const term = req.query.term;
  res.send(`Search term: ${term}`);
});
Q: How do you handle multipart/form-data in Express.js?
A: To handle multipart/form-data in Express.js, use the multer middleware to handle file uploads and form data. Configure multer to specify the destination for uploaded files. For example:

javascript
Copy code
const multer = require('multer');
const upload = multer({ dest: 'uploads/' });
app.post('/upload', upload.single('file'), (req, res) => {
  res.send('File uploaded');
});
Q: How do you implement middleware for specific routes?
A: Middleware for specific routes is implemented by passing the route path as the first argument to app.use(). For example:

javascript
Copy code
app.use('/api', apiMiddleware);
Q: How do you handle request and response data in Express.js?
A: In Express.js, request data can be accessed using req properties like req.body, req.params, req.query, and req.headers. Response data is sent using methods like res.send(), res.json(), and res.sendFile().

Q: How can you debug Express.js applications?
A: To debug Express.js applications, use debugging tools and techniques like logging with console.log(), using the debug package, and employing breakpoints in an integrated development environment (IDE). The morgan middleware can also help log HTTP requests for debugging purposes.