{"question": "What is the difference between printf and sprintf in C?", "answer": "printf outputs formatted data to the standard output (usually the console), while sprintf formats and stores the data in a string buffer."}
{"question": "What is a pointer in C?", "answer": "A pointer is a variable that stores the memory address of another variable. It is used for dynamic memory allocation and array manipulation."}
{"question": "What is the difference between malloc and calloc?", "answer": "malloc allocates a specified amount of memory without initializing it, while calloc allocates memory for an array of elements and initializes all bytes to zero."}
{"question": "How do you free dynamically allocated memory in C?", "answer": "You use the free function to release memory that was previously allocated with malloc, calloc, or realloc."}
{"question": "What is a segmentation fault?", "answer": "A segmentation fault is an error that occurs when a program attempts to access a memory location that it is not allowed to access."}
{"question": "What is the purpose of the static keyword in C?", "answer": "The static keyword limits the scope of a variable or function to the file or block in which it is declared. For global variables and functions, it restricts their visibility to the file they are declared in."}
{"question": "What is a header file in C?", "answer": "A header file contains declarations of functions, macros, constants, and data types that can be shared between multiple source files. It typically has a .h extension."}
{"question": "What is the use of the const keyword in C?", "answer": "The const keyword defines variables whose values cannot be modified after initialization. It is used to protect data from unintended changes."}
{"question": "What is the difference between struct and union in C?", "answer": "In a struct, each member has its own memory location, whereas in a union, all members share the same memory location. This means a struct can store multiple values simultaneously, while a union can only store one value at a time."}
{"question": "What is the purpose of the volatile keyword in C?", "answer": "The volatile keyword indicates that a variable's value may change at any time without any action being taken by the code the compiler finds nearby. It is often used for hardware registers and shared variables in multithreading."}
{"question": "How does the sizeof operator work in C?", "answer": "The sizeof operator returns the size, in bytes, of a variable or data type. It is evaluated at compile time."}
{"question": "What is a function pointer in C?", "answer": "A function pointer is a pointer that points to the address of a function. It allows for dynamic function calls and implementing callback functions."}
{"question": "How do you declare and initialize a 2D array in C?", "answer": "A 2D array is declared as type arrayName[rows][columns]; and can be initialized like type arrayName[2][3] = { {1, 2, 3}, {4, 5, 6} };."}
{"question": "What is a typedef in C?", "answer": "The typedef keyword creates an alias for existing data types, making code more readable and manageable."}
{"question": "What is the difference between ++i and i++ in C?", "answer": "++i (pre-increment) increments the value of i before its value is used in an expression, while i++ (post-increment) increments the value of i after its value has been used."}
{"question": "What is a macro in C?", "answer": "A macro is a preprocessor directive defined using #define that replaces occurrences of a name with a defined value or code snippet before compilation."}
{"question": "What is the use of the enum keyword in C?", "answer": "The enum keyword defines a set of named integer constants, which can improve code readability and maintainability."}
{"question": "How do you handle errors in C?", "answer": "Error handling in C can be done using return codes, the errno variable, or custom error-handling functions."}
{"question": "What is a file pointer in C?", "answer": "A file pointer is a pointer to a FILE structure used to manage file input and output operations in C. It is obtained from functions like fopen."}
{"question": "What is the difference between fopen and freopen in C?", "answer": "fopen opens a new file or creates a file, while freopen reopens an existing file associated with a file pointer, typically used to redirect input/output."}
{"question": "How do you read and write files in C?", "answer": "Files are read and written using functions such as fread, fwrite, fgetc, fputc, fgets, and fputs."}
{"question": "What is a null pointer in C?", "answer": "A null pointer is a pointer that does not point to any valid memory location. It is typically initialized to NULL to indicate that it is not currently pointing to any object."}
{"question": "What is a segmentation fault and how can you avoid it?", "answer": "A segmentation fault occurs when a program tries to access a memory location it is not allowed to access. It can be avoided by ensuring proper memory management and pointer handling."}
{"question": "What are command-line arguments in C?", "answer": "Command-line arguments are parameters passed to a program at runtime, accessible via the argc and argv parameters of the main function."}
{"question": "What is a static variable in C?", "answer": "A static variable retains its value between function calls and is initialized only once. It has a scope limited to the block or function in which it is declared."}
{"question": "What is the use of the return statement in C?", "answer": "The return statement exits a function and optionally returns a value to the calling function."}
{"question": "What are the different types of loops in C?", "answer": "The main types of loops in C are for, while, and do-while. Each allows repeated execution of a block of code based on specified conditions."}
{"question": "What is a break statement?", "answer": "The break statement exits from the nearest enclosing loop or switch statement, terminating its execution."}
{"question": "What is the continue statement used for?", "answer": "The continue statement skips the remaining code in the current iteration of a loop and proceeds to the next iteration."}
{"question": "What is the sizeof operator used for?", "answer": "The sizeof operator returns the size, in bytes, of a data type or variable, evaluated at compile time."}
{"question": "How do you declare a function in C?", "answer": "A function is declared with a return type, function name, and parameters, for example: int add(int a, int b);."}
{"question": "What is a default argument in C?", "answer": "C does not support default arguments directly. Instead, you must provide multiple function overloads or use a workaround with function pointers."}
{"question": "What is type casting in C?", "answer": "Type casting is the process of converting a variable from one data type to another using casting operators, such as (int)variable."}
{"question": "What is the use of extern keyword in C?", "answer": "The extern keyword is used to declare a variable or function that is defined in another file or module, allowing it to be used across multiple files."}
{"question": "What is a struct in C?", "answer": "A struct is a user-defined data type that groups related variables of different data types under one name."}
{"question": "How do you access a struct member in C?", "answer": "Struct members are accessed using the dot operator (.) for regular variables and the arrow operator (->) for pointers to structs."}
{"question": "What is the difference between = and == in C?", "answer": "= is the assignment operator, used to assign a value to a variable. == is the equality operator, used to compare two values for equality."}
{"question": "What are preprocessor directives in C?", "answer": "Preprocessor directives are commands that are processed by the preprocessor before compilation, such as #include, #define, and #ifdef."}
{"question": "What is the purpose of the #include directive?", "answer": "The #include directive is used to include the contents of a file (usually a header file) into the source file."}
{"question": "What is the #define directive used for?", "answer": "The #define directive defines macros or constants that can be used throughout the code, often to create symbolic names for constants or code snippets."}
{"question": "What is the void keyword in C?", "answer": "The void keyword specifies that a function does not return a value or that a pointer does not point to any specific data type."}
{"question": "What is the difference between ++*p and *p++?", "answer": "++*p increments the value pointed to by p before the value is used, while *p++ increments the pointer p after the value it points to is used."}
{"question": "How do you handle multiple source files in C?", "answer": "Multiple source files are managed by including header files with declarations and using #include directives. Each source file is compiled separately and then linked together."}
{"question": "What are bitwise operators in C?", "answer": "Bitwise operators perform operations on the binary representations of integers, such as & (AND), | (OR), ^ (XOR), ~ (NOT), << (left shift), and >> (right shift)."}
{"question": "What is the purpose of the switch statement in C?", "answer": "The switch statement allows branching execution based on the value of a variable, providing a more readable way to handle multiple conditions compared to a series of if statements."}
{"question": "How do you define a constant in C?", "answer": "Constants can be defined using the const keyword or #define directive. For example: const int max = 100; or #define MAX 100."}
{"question": "What is the use of typedef in C?", "answer": "typedef is used to create new names for existing data types, improving code readability and portability."}
{"question": "What is the purpose of the goto statement in C?", "answer": "The goto statement transfers control to a labeled statement within the same function. It is generally discouraged due to its impact on code readability and maintainability."}
{"question": "What are local and global variables in C?", "answer": "Local variables are declared inside a function or block and are accessible only within that function or block. Global variables are declared outside any function and are accessible from any function within the same file or across files if declared with extern."}
{"question": "How do you perform error handling in C file operations?", "answer": "Error handling in file operations is done by checking the return values of functions like fopen, fread, and fwrite, and by examining the errno variable."}
{"question": "What is a linked list in C?", "answer": "A linked list is a data structure where each element (node) contains a data value and a pointer to the next node in the sequence, allowing for dynamic memory allocation and flexible data management."}
{"question": "How do you implement a simple linked list in C?", "answer": "A simple linked list is implemented by defining a node structure with a data field and a pointer to the next node. Functions are created to insert, delete, and traverse nodes."}
{"question": "What is a typedef struct in C?", "answer": "typedef struct is used to define a new data type that represents a structure, allowing for more readable and manageable code. For example: typedef struct { int x; int y; } Point;."}
{"question": "What is a function prototype in C?", "answer": "A function prototype is a declaration of a function that specifies its return type, name, and parameters, used to inform the compiler about the function's signature before its actual definition."}
{"question": "How do you handle dynamic memory allocation in C?", "answer": "Dynamic memory allocation is handled using functions like malloc, calloc, realloc, and free to allocate and manage memory during program execution."}
{"question": "What is the purpose of assert in C?", "answer": "assert is used to test assumptions made by the program and to catch programming errors. If the condition in assert evaluates to false, the program will terminate with an error message."}
{"question": "How do you handle string manipulation in C?", "answer": "String manipulation is handled using standard library functions like strcpy, strcat, strlen, strcmp, and others provided in string.h."}
{"question": "What is the use of the sizeof operator?", "answer": "The sizeof operator determines the size, in bytes, of a data type or object. It is evaluated at compile time and can be used for dynamic memory allocation."}
{"question": "What is the return type of main function in C?", "answer": "The main function typically returns an int, which represents the exit status of the program. A return value of 0 usually indicates successful execution."}
{"question": "What is memory leak in C?", "answer": "A memory leak occurs when a program allocates memory but fails to release it, leading to wasted memory resources and potential performance issues."}
{"question": "How do you use command-line arguments in C?", "answer": "Command-line arguments are accessed through the parameters argc (argument count) and argv (argument vector) in the main function, allowing you to pass data to the program at runtime."}
{"question": "What is stack overflow in C?", "answer": "A stack overflow occurs when a program uses more stack memory than is available, typically due to excessive recursion or allocation of large local variables."}
{"question": "What is the difference between memcpy and memmove?", "answer": "memcpy copies data from one memory location to another and is not safe for overlapping memory areas. memmove safely handles overlapping memory regions by copying data to a temporary buffer."}
{"question": "What is a recursive function in C?", "answer": "A recursive function is a function that calls itself to solve a problem by breaking it into smaller sub-problems, typically with a base case to terminate the recursion."}
{"question": "What is a static function in C?", "answer": "A static function is a function whose scope is limited to the file in which it is defined. It cannot be accessed from other files."}
{"question": "How do you declare a constant in C?", "answer": "Constants can be declared using the const keyword or #define directive, for example, const int MAX = 100; or #define MAX 100."}
{"question": "What is a macro in C?", "answer": "A macro is a preprocessor directive defined using #define that substitutes a code snippet or value before compilation."}
{"question": "What are bit fields in C?", "answer": "Bit fields allow the allocation of a specific number of bits for a variable within a struct, which can be useful for memory optimization in certain applications."}
{"question": "What is the void* pointer used for?", "answer": "The void* pointer is a generic pointer that can point to any data type. It is often used for functions that need to handle different types of data in a generic way."}
{"question": "What is the purpose of enum in C?", "answer": "An enum is used to define a set of named integer constants, improving code readability by allowing symbolic names instead of numeric values."}
{"question": "How do you perform a binary search in C?", "answer": "Binary search is performed on a sorted array by repeatedly dividing the search interval in half. The search continues until the target value is found or the interval is empty."}
{"question": "What is the difference between fgetc and fgets?", "answer": "fgetc reads a single character from a file, while fgets reads a string of characters from a file up to a specified limit or until a newline is encountered."}
{"question": "How do you handle file I/O in C?", "answer": "File I/O is managed using functions from the stdio.h library, such as fopen, fclose, fread, fwrite, fprintf, and fscanf."}
{"question": "What is the difference between intandconst int`?**", "answer": "int* is a pointer to an integer, allowing both the pointer and the pointed-to value to be modified. const int* is a pointer to a constant integer, meaning the pointed-to value cannot be modified through this pointer."}
{"question": "What are function pointers and how are they used?", "answer": "Function pointers are pointers that point to the address of a function, allowing for dynamic function calls and the implementation of callback functions."}
{"question": "What is the use of the const` keyword in C?", "answer": "The const keyword defines variables whose values cannot be modified after initialization, providing a way to ensure that certain data remains unchanged."}
{"question": "What is a memory pool in C?", "answer": "A memory pool is a block of pre-allocated memory used to manage dynamic memory allocation more efficiently by reducing fragmentation and allocation overhead."}
{"question": "What is typecasting in C?", "answer": "Typecasting is the conversion of a variable from one data type to another, either implicitly by the compiler or explicitly using casting operators, such as (int)variable."}
{"question": "How do you use variadic functions in C?", "answer": "Variadic functions accept a variable number of arguments, defined using stdarg.h macros like va_start, va_arg, and va_end."}
{"question": "What is undefined behavior in C?", "answer": "Undefined behavior occurs when the code executes in an unpredictable manner due to violations of language rules or standard guarantees, often leading to crashes or incorrect results."}
{"question": "How do you perform error checking in system calls in C?", "answer": "Error checking in system calls is done by examining the return value of the call and using perror or strerror to provide descriptive error messages."}
{"question": "What is the difference between calloc and malloc?", "answer": "calloc allocates memory and initializes it to zero, while malloc allocates memory without initializing it."}
{"question": "How do you implement a stack in C?", "answer": "A stack can be implemented using an array or linked list, with operations such as push, pop, and peek to manage data in a Last-In-First-Out (LIFO) manner."}
{"question": "What is data alignment in C?", "answer": "Data alignment refers to arranging data in memory according to the requirements of the hardware architecture, which can impact performance and access efficiency."}
{"question": "What are command-line arguments and how are they used?", "answer": "Command-line arguments are parameters passed to a program at runtime, accessible through the argc and argv parameters in the main function, allowing dynamic configuration of program behavior."}
{"question": "How do you implement a queue in C?", "answer": "A queue can be implemented using an array or linked list with operations such as enqueue, dequeue, and peek to manage data in a First-In-First-Out (FIFO) manner."}
{"question": "What is pointer arithmetic?", "answer": "Pointer arithmetic involves performing operations like addition, subtraction, and comparison on pointers to traverse arrays or memory blocks."}
{"question": "What is the difference between static and dynamic memory allocation?", "answer": "Static memory allocation reserves memory at compile time, while dynamic memory allocation reserves memory at runtime using functions like malloc and free."}
{"question": "What is the purpose of the volatile keyword in C?", "answer": "The volatile keyword prevents the compiler from optimizing code that accesses variables whose value may change unexpectedly, such as hardware registers or variables modified by interrupts."}
{"question": "How do you implement a binary tree in C?", "answer": "A binary tree is implemented using a node structure with data and pointers to left and right children. Functions for insertion, deletion, and traversal manage the tree structure."}
{"question": "What is stack and heap memory?", "answer": "Stack memory is used for function call management and local variables, allocated and deallocated automatically. Heap memory is used for dynamic memory allocation, managed explicitly by the programmer."}
{"question": "How do you handle null pointers in C?", "answer": "Null pointers are handled by checking if a pointer is equal to NULL before dereferencing it to avoid undefined behavior and crashes."}
{"question": "What is a hash table and how is it implemented in C?", "answer": "A hash table is a data structure that maps keys to values using a hash function. It is implemented using an array of buckets where each bucket handles collisions using techniques like chaining or open addressing."}
{"question": "How do you handle file locking in C?", "answer": "File locking is managed using functions like flock or fcntl to prevent concurrent access or modifications to a file by multiple processes."}
{"question": "What is integer overflow in C?", "answer": "Integer overflow occurs when an arithmetic operation exceeds the maximum or minimum value that can be stored in an integer variable, leading to unexpected results or errors."}
{"question": "How do you implement a circular buffer in C?", "answer": "A circular buffer is implemented using a fixed-size array and two pointers (head and tail) to manage data in a circular fashion, overwriting old data when the buffer is full."}
{"question": "What is data structure and why is it important in C?", "answer": "A data structure is a way of organizing and storing data to enable efficient access and modification. It is important in C for optimizing performance and managing data effectively."}
{"question": "What is endianness and how does it affect C programs?", "answer": "Endianness refers to the order in which bytes are stored in memory. It can affect how data is interpreted and transferred between systems with different endianness."}
{"question": "How do you handle signal handling in C?", "answer": "Signal handling is managed using functions like signal or sigaction to define custom actions for handling signals such as interrupts or errors."}
{"question": "What is a memory-mapped file in C?", "answer": "A memory-mapped file is a file that is mapped into the address space of a process, allowing the file to be accessed as if it were a part of memory, typically using functions like mmap."}
